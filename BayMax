# -*- coding: utf-8 -*-
"""BaymaxCode

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1dSPX_NT18KOz2X1Lg0k59eDU5l4fY8xo
"""

#Description: This is a 'self learning' chatbot program

#install the package NLTK
pip install nltk

#install the package newspaper3k
pip install newspaper3k

#Import libraries
from newspaper import Article
import random
import string
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity
import nltk 
import numpy as np
import warnings

#Ignore any warning messages
warnings.filterwarnings('ignore')

#Download the package form NLTK
nltk.download('punkt', quiet=True)
nltk.download('wordnet', quiet=True)

#Get the article URL
article= Article('https://www.heart.org/en/health-topics/high-blood-pressure/understanding-blood-pressure-readings')
article.download()
article.parse()
article.nlp()
corpus=article.text

#print the corpus/text
print(corpus)

#Tokenization
text=corpus
sent_tokens= nltk.sent_tokenize(text) #convert the text into a list of sentences

#Print the list of sentences
print(sent_tokens)

#create a dictionary (key:value) pair to remove punctuations
remove_punct_dict = dict(   (ord(punct),None)for punct in string.punctuation)

#Print the punctuations
print(string.punctuation)

#print the dictionary
print(remove_punct_dict)

#create a function to returna list of lemmatized lower case words after emoving puncs
def LemNormalize(text):
  return nltk.word_tokenize(text.lower().translate(remove_punct_dict))

#printing tokenizatons text
print(LemNormalize(text))

#keyword matching

#greeting inputs
GREETING_INPUTS = ["hi","hello","hola","greetings","wassup","hey","hye","helo"]

#Greeting responses
GREETING_RESPONSE = ["howdy","hey","hello","what's good","hey there"]

#Function to return a random greeting response to a users greeting
def greeting(sentence):
  #if the user's input is a greeting, then return a randomly chosen greeting
  for word in sentence.split():
    if word.lower() in GREETING_INPUTS:
      return random.choice(GREETING_RESPONSE)

#generate the response
def response(user_response):


  #The users response / query
  #user_response = 'What is blood pressure'

  user_response = user_response.lower() #make the response lower case

  #print(user_response)

  #set the chatbot response to an empty string
  robo_response = ''

  #Append the users response to the sentence
  sent_tokens.append(user_response)

  ###print the sentence list after appendign the user response
  #print(sent_tokens)

  #create a TfidfVEctorizer object
  TfidfVec = TfidfVectorizer(tokenizer = LemNormalize, stop_words='english')

  #convert the text to a matrix of TF-IDF features
  tfidf= TfidfVec.fit_transform(sent_tokens)

  ###pritn the tfidf features
  #print(tfidf)

  #get the measure of similarity(similarity score)
  vals = cosine_similarity(tfidf[-1],tfidf)
  #print simi score
  #print(vals)

  #Get the index of the most similar text/sentence to the user response
  idx = vals.argsort()[0][-2]

  #reduce the dimensionality of vals
  flat = vals.flatten()

  #sort the list in ascending order
  flat.sort()

  #get the most similar score to the users response
  score=flat[-2]

  #print(score)

  #if the variable score is 0 then there is no text similar to user response
  if(score == 0):
    robo_response = robo_response+"I apologize, I don't understand."
  else:
    robo_response = robo_response+sent_tokens[idx]

  #print the chatbot response
  #print(robo_response)

  sent_tokens.remove(user_response)

  return robo_response

flag = True
print("Baymax: I am Baymax. I will answer your your queries about your health. If you want to exit type Bye")
while(flag==True):
  user_response=input()
  user_response=user_response.lower()
  if(user_response != 'bye'):
    if(user_response == 'thanks' or user_response=='thank you'):
      flag=False
      print("Baymax: You're Welcome")
    else:
      if(greeting(user_response) != None):
        print("Baymax : "+greeting(user_response))
      else:
        print("Baymax: "+response(user_response))
  else:
    flag='False'
    print("Baymax: Chat with you later")

